/**
 * PWA Service Worker Registration Utilities
 * 
 * This module handles Progressive Web App (PWA) functionality for LanguageShop.
 * It provides clean, React-friendly service worker registration with proper
 * error handling and update management.
 * 
 * Features:
 * - Safe service worker registration (checks browser support)
 * - Automatic update detection and notification
 * - Production-only registration (via PWAProvider)
 * - Proper error handling with console logging
 * - CSP-friendly (no inline scripts)
 * 
 * Usage:
 * Import and call registerServiceWorker() in your React components
 * or use the PWAProvider wrapper component for automatic registration.
 * 
 * @see PWAProvider component for automatic registration
 * @see vite.config.ts for Workbox caching configuration
 */

/**
 * Registers the service worker for PWA functionality
 * 
 * This function safely registers the service worker generated by VitePWA/Workbox.
 * It includes proper browser support detection, error handling, and update management.
 * 
 * @returns Promise<void> - Resolves when registration is complete or skipped
 * 
 * @example
 * ```typescript
 * // Manual registration
 * import { registerServiceWorker } from '~/lib/pwa';
 * 
 * useEffect(() => {
 *   if (import.meta.env.PROD) {
 *     registerServiceWorker();
 *   }
 * }, []);
 * ```
 */
export const registerServiceWorker = async (onUpdateAvailable?: (available: boolean) => void) => {
    // Skip registration on server-side or unsupported browsers
    if (typeof window === "undefined" || !("serviceWorker" in navigator)) {
        return;
    }

    try {
        // Register the service worker generated by VitePWA
        const registration = await navigator.serviceWorker.register("/sw.js", {
            scope: "/", // Service worker controls entire app
        });

        console.log("‚úÖ Service Worker registered successfully:", registration);

        // Handle service worker updates
        registration.addEventListener("updatefound", () => {
            const newWorker = registration.installing;
            if (newWorker) {
                newWorker.addEventListener("statechange", () => {
                    if (
                        newWorker.state === "installed" &&
                        navigator.serviceWorker.controller
                    ) {
                        // New version available - notify user
                        console.log("üîÑ New app version available! Please refresh to update.");
                        onUpdateAvailable?.(true);
                    }
                });
            }
        });
    } catch (error) {
        console.error("‚ùå Service Worker registration failed:", error);
    }
};
